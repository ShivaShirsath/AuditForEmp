@model IEnumerable<EmployeeAudit.Models.Event>
@using Newtonsoft.Json;

@functions {
  // Function to convert UTC time to Indian Kolkata time and return as string
  public string ConvertUTCToIST(string utcTime)
  {
    DateTime utcDateTime = DateTime.ParseExact(utcTime, "yyyy-MM-ddTHH:mm", null, System.Globalization.DateTimeStyles.None);
    TimeZoneInfo istTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Asia/Kolkata");
    DateTime istTime = TimeZoneInfo.ConvertTimeFromUtc(utcDateTime, istTimeZone);
    return istTime.ToString("yyyy-MM-dd hh:mm");
  }
}

<h1 align="center">@ViewData["Title"]</h1>
<style>
  *:not(nav, footer) {
    border-radius: 2.5vmin;
    border-radius: 2.5dvmin;
  }

  details {
    padding: .5vmin;
    padding: .5dvmin;
  }

  details > summary {
    cursor: pointer;
  }
  summary:not(#mainLog), ul, li {
    color: black;
  }
  ul {
    margin-block: 0;
  }

  li {
    list-style-type: '⎚ ';
  }

    li:has(details), li.nav-item {
      list-style: none;
    }

  input {
    color: currentColor;
    border: .005vmin solid currentColor;
    border: .005dvmin solid currentColor;
    text-align: center;
  }

  code {
    font-family: 'Courier New';
    color: currentColor;
  }

  #mainLog {
    display: flex;
  }

  details:has(#mainLog) {
    border: .005vmin solid tomato;
    border: .005dvmin solid tomato;
  }

    details:has(#mainLog) > * {
      margin: .5vmin;
      margin: .5dvmin;
    }

  /* Custom marker for the closed state */
  details > summary::before {
    content: "▷";
    margin-right: .5vmin;
    margin-right: .5dvmin;
  }

  /* Custom marker for the open state */
  details[open] > summary::before {
    content: "▽";
  }

  summary {
    list-style: none;
  }
</style>
<table class="table w-100">
  <tbody>
  <thead>
  <th>
    @Html.DisplayNameFor(model => model.EventId)
  </th>
  <th>
    @Html.DisplayNameFor(model => model.LastUpdatedDate)
  </th>
  <th>
    @Html.DisplayNameFor(model => model.User)
  </th>
  <th>
    @Html.DisplayNameFor(model => model.EventType)
  </th>
  <th>
    @Html.DisplayNameFor(model => model.JsonData)
  </th>
  </thead>
  @foreach (var item in Model.OrderByDescending(item => item.EventId))
  {
    <tr class="@(
              (item.EventType== "POST Employees/Create")
              ? "text-success"
              :(item.EventType== "POST Employees/Delete")
                ?"text-danger"
                :(item.EventType== "POST Employees/Edit")
                  ?"text-warning"
                  :(item.EventType== "GET Employees/Details")
                    ?"text-primary"
                    :"text-dark"
            )">
      <td>@item.EventId</td>
      <td>
        @{
          dynamic jsonData = JsonConvert.DeserializeObject<dynamic>(item.JsonData);
          DateTime startDate = DateTime.Parse(jsonData.StartDate.ToString());
          string formattedDateTimeValue = startDate.ToString("yyyy-MM-ddTHH:mm");
        }
        <input class="fw-bolder" type="datetime-local" value="@ConvertUTCToIST(formattedDateTimeValue)" disabled />
      </td>
      <th>
        @Html.DisplayFor(model => item.User)
      </th>
      <td>@item.EventType</td>
      <td>
        <details class="m-0 p-0" onclick='createCollapsibleList(this, @JsonConvert.SerializeObject(JsonConvert.DeserializeObject(item.JsonData), Formatting.Indented))'>
          <summary id="mainLog">@Html.DisplayNameFor(model => model.JsonData)</summary>
        </details>
      </td>
    </tr>
  }
  </tbody>
</table>
<script>
  function createCollapsibleList(element, data) {
    // Check if the element already has the collapsible list
    if (element.hasAttribute("data-collapsible-list")) {
      return; // If yes, exit the function and don't recreate the list
    }
    // Add custom attribute to mark the element as having the collapsible list
    element.setAttribute("data-collapsible-list", "true");

    const keys = Object.keys(data);
    keys.forEach(key => {
      const listItem = document.createElement("li");
      if (typeof data[key] === "object" && data[key] !== null) {
        listItem.innerHTML = `<details style='padding:0'><summary><b><code>${key}</code></b></summary><ul></ul></details>`;
        const nestedList = listItem.querySelector("ul");
        createCollapsibleList(nestedList, data[key]);
      } else {
        listItem.innerHTML = `<b><code>${key}</code> : </b><code style="word-break: break-all">${data[key]}</code>`;
      }
      element.appendChild(listItem);
    });
  }
</script>